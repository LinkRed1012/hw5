{"version":3,"sources":["Components/TodoItem.js","Components/TodoList.js","todo.js","registerServiceWorker.js","index.js"],"names":["TodoItem","onMarkItemComplete","event","props","markItemComplete","id","onDeleteItem","deleteItem","itemClass","this","status","className","type","onChange","task","style","float","marginTop","onClick","Component","TodoList","items","map","item","React","todo","state","value","handleInput","setState","target","handleAddItem","preventDefault","newItem","Date","now","prevState","concat","handleMarkItemComplete","itemId","updatedItems","handleDeleteItem","filter","width","padding","placeHolder","marginLeft","marginBottom","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uNAiCeA,E,kDA5BX,aAAc,IAAD,8BACT,gBAEKC,mBAAmB,SAACC,GACrB,EAAKC,MAAMC,iBAAiB,EAAKD,MAAME,KAG3C,EAAKC,aAAa,SAACJ,GACf,EAAKC,MAAMI,WAAW,EAAKJ,MAAME,KAR5B,E,0CAWb,WACI,IAAMG,EAAY,oBAAsBC,KAAKN,MAAMO,OAAS,OAAS,UAEzE,OACI,qBAAKC,UAAU,kBAAf,SACA,sBAAKA,UAAU,OAAf,UAEA,uBAAOC,KAAK,WAAWC,SAAUJ,KAAKR,qBACtC,uBAAMU,UAAWH,EAAjB,cAA8BC,KAAKN,MAAMW,KAAzC,OACA,wBAAQC,MAAO,CAACC,MAAM,QAASC,UAAU,QAASL,KAAK,SAASD,UAAU,wBAAwBO,QAAST,KAAKH,aAAhH,wB,GAtBea,aCeRC,E,4JAZX,WAAU,IAAD,OACT,OACI,8BACCX,KAAKN,MAAMkB,MAAMC,KAAI,SAAAC,GAAI,OAC1B,cAAC,EAAD,CAAUlB,GAAIkB,EAAKlB,GAAIK,OAAQa,EAAKb,OAAQI,KAAMS,EAAKT,KAAMP,WAAY,EAAKJ,MAAMI,WAAYH,iBAAkB,EAAKD,MAAMC,4B,GAN9GoB,IAAML,WCyFdM,E,kDAtFX,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,MAAM,GACNN,MAAM,IAEV,EAAKO,YAAY,SAAC1B,GACd,EAAK2B,SAAS,CACVF,MAAMzB,EAAM4B,OAAOH,SAI3B,EAAKI,cAAc,SAAC7B,GAEhB,GADAA,EAAM8B,iBACgB,KAAnB,EAAKN,MAAMC,MAAd,CAEA,IAAMM,EAAQ,CACVnB,KAAK,EAAKY,MAAMC,MAChBtB,GAAI6B,KAAKC,MACTzB,QAAO,GAEX,EAAKmB,UAAU,SAACO,GAAD,MAAc,CACzBf,MAAMe,EAAUf,MAAMgB,OAAOJ,GAC7BN,MAAO,SAIf,EAAKW,uBAAuB,SAACC,GAEzB,IAAMC,EAAc,EAAKd,MAAML,MAAMC,KAAI,SAAAC,GAIrC,OAHGgB,IAAWhB,EAAKlB,KACfkB,EAAKb,QAAUa,EAAKb,QAEjBa,KAEX,EAAKM,SAAS,CACVR,MAAM,GAAGgB,OAAOG,MAIxB,EAAKC,iBAAiB,SAACF,GAEnB,IAAMC,EAAa,EAAKd,MAAML,MAAMqB,QAAO,SAAAnB,GACvC,OAAOA,EAAKlB,KAAKkC,KAGrB,EAAKV,SAAS,CACVR,MAAM,GAAGgB,OAAOG,MA/Cf,E,0CAoDb,WAYA,OACI,qBAAK7B,UAAU,kBAAf,SACA,sBAAKA,UAAU,MAAf,UAEA,qBAAKA,UAAU,aACf,qBAAKA,UAAU,WAAf,SACA,sBAAKA,UAAU,OAAf,UACA,oBAAIA,UAAU,UAAd,uBACA,oBAAIA,UAAU,UAAd,+CACA,uBAAOI,MAdW,CACd4B,MAAM,QACNC,QAAQ,OAYeC,YAAY,eAAejC,KAAK,QAAQC,SAAUJ,KAAKmB,YAAaD,MAAOlB,KAAKiB,MAAMC,QACjH,wBAAQZ,MApBQ,CACZ+B,WAAW,OACXC,aAAa,OAkBSnC,KAAK,SAASD,UAAU,yBAAyBO,QAAST,KAAKsB,cAAzF,iBACA,cAAC,EAAD,CAAUV,MAAOZ,KAAKiB,MAAML,MAAOd,WAAYE,KAAKgC,iBAAkBrC,iBAAkBK,KAAK6B,8BAG7F,qBAAK3B,UAAU,sB,GAhFJQ,aCKb6B,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpC,QACf8B,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEnEC,IAASC,OACT,cAAC,EAAD,IACAC,SAASC,eAAe,SDYP,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASrE,SACuD,IAAhEqE,EAASC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7BT,OAAOC,SAASkC,eAKpB/B,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAmB,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCtC1BgC,I","file":"static/js/main.eb8e48c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './component.css';\n\nclass TodoItem extends Component {\n    \n    constructor(){\n        super();\n        \n        this.onMarkItemComplete=(event)=>{\n            this.props.markItemComplete(this.props.id)\n        }\n        \n        this.onDeleteItem=(event)=>{\n            this.props.deleteItem(this.props.id)\n        }  \n    }  \n    render() {\n        const itemClass = \"isItemCompleted-\" + (this.props.status ? \"done\" : \"undone\");\n     \n    return (\n        <div className=\"container-fluid\">\n        <div className=\"item\">\n        \n        <input type=\"checkbox\" onChange={this.onMarkItemComplete} />\n        <span className={itemClass}> {this.props.task} </span> \n        <button style={{float:'right', marginTop:\"-4px\"}} type=\"button\" className=\"btn btn-danger btn-sm\" onClick={this.onDeleteItem}>x</button>\n        \n        </div>\n        </div>\n    );\n  }   \n}\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport './component.css';\n\nclass TodoList extends React.Component {\n\n    render() {\n    return (  \n        <div>\n        {this.props.items.map(item => (\n        <TodoItem id={item.id} status={item.status} task={item.task} deleteItem={this.props.deleteItem} markItemComplete={this.props.markItemComplete} />\n        ))} \n    </div>\n        \n    );\n  } \n}\n\nexport default TodoList;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './Components/TodoList';\nimport TodoItem from './Components/TodoItem';\n\nclass todo extends Component {\n  \n    constructor(){\n        super();\n        this.state={\n            value:\"\",\n            items:[]\n        }\n        this.handleInput=(event)=>{\n            this.setState({\n                value:event.target.value\n            })\n        }\n        \n        this.handleAddItem=(event)=>{\n            event.preventDefault();\n            if(this.state.value===\"\")\n                return; \n            const newItem={\n                task:this.state.value,\n                id: Date.now(),\n                status:false\n            }\n            this.setState( (prevState)=>({\n                items:prevState.items.concat(newItem),\n                value: \"\",\n                \n            }))  \n        }\n        this.handleMarkItemComplete=(itemId)=>{\n            \n            const updatedItems= this.state.items.map(item =>{\n                if(itemId === item.id)\n                    item.status = !item.status;\n                \n                return item;\n            })\n            this.setState({\n                items:[].concat(updatedItems)\n            })       \n        }\n \n        this.handleDeleteItem=(itemId)=>{\n            \n            const updatedItems=this.state.items.filter(item=>{\n                return item.id!==itemId    \n            })\n            \n            this.setState({\n                items:[].concat(updatedItems)\n            })\n        }\n    }\n    \n    render() {\n        \n        const btn_style={\n            marginLeft:\"10px\",\n            marginBottom:\"5px\"\n        }\n        \n        const input_style={\n            width:\"250px\",\n            padding:\"5px\"\n        }  \n        \n    return (\n        <div className=\"container-fluid\">\n        <div className=\"row\">\n        \n        <div className=\"col-md-4\"></div> \n        <div className=\"col-md-4\">\n        <div className=\"body\">\n        <h2 className=\"heading\">TODO List</h2>\n        <h3 className=\"heading\">Do it Everyday U Can Be Better :)</h3>   \n        <input style={input_style} placeHolder=\"Add New Todo\" type=\"input\" onChange={this.handleInput} value={this.state.value} />\n        <button style={btn_style} type=\"button\" className=\"btn btn-primary btn-md\" onClick={this.handleAddItem}>Add</button>\n        <TodoList items={this.state.items} deleteItem={this.handleDeleteItem} markItemComplete={this.handleMarkItemComplete} />\n        </div>\n        </div>\n        <div className=\"col-md-4\"></div> \n        \n        </div>\n        </div>\n    );\n  }\n}\n\nexport default todo;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import App from './App';\nimport Todo from './todo';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n<Todo />, \ndocument.getElementById('root')\n);\nregisterServiceWorker();"],"sourceRoot":""}